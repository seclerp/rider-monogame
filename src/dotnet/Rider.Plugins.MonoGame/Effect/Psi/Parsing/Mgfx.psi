options {
    // Parser options
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    // Parser class name and namespace
    parserPackage="Rider.Plugins.MonoGame.Effect.Psi.Parsing.Gen";
    parserClassName="EffectParserGenerated";

    // Strongly type the lexer we're using. ILexer<int> is the caching lexer instance
    "lexerClassName"="JetBrains.ReSharper.Psi.Parsing.ILexer<int>";

    // FQN of (non-generated) class that provides messages for the parser
    // parserMessagesClass="JetBrains.ReSharper.Plugins.Unity.Shaders.ShaderLab.Psi.Parsing.ParserMessages";

    // Parser, error messages + token bitsets target folder
    parserTargetSubdir="Effect/Psi/Parsing/Gen";

    // Don't generate a bitset unless there's 4 or more comparisons to be made
    tokenBitsetThreshold=4;


    // Composite node type/element generation options
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    // Existing language specific ITreeNode
    "psiElementClassFQName"="Rider.Plugins.MonoGame.Effect.Psi.Parsing.IEffectTreeNode";

    // Existing token type containing class + namespace
    tokenTypePackageName="JetBrains.ReSharper.Plugins.Unity.Shaders.ShaderLab.Psi.Parsing";
    tokenTypeClassName="ShaderLabTokenType";

    // Set base index for generated (element, not token) node types. Defaults to 2000, tokens default to 1000
    // tokenTypeBaseIndex=2000;

    // Tree node interface namespace + target folder (also target folder for navigators + visitors)
    psiInterfacePackageName="JetBrains.ReSharper.Plugins.Unity.Shaders.ShaderLab.Psi.Tree";
    psiInterfacesTargetSubdir="Psi/ShaderLab/Tree";

    // Tree node implementation namespace, base type and target folder
    psiStubsPackageName="JetBrains.ReSharper.Plugins.Unity.Shaders.ShaderLab.Psi.Tree.Impl";
    psiStubsBaseClass="ShaderLabCompositeElement";
    psiStubsTargetSubdir="Psi/ShaderLab/Tree/Impl";

    // Existing composite node type base class
    elementTypeBaseClass="ShaderLabCompositeNodeType";

    // Namespace for generating custom interface when `customInterface` option used
    customInterfacePackage="JetBrains.ReSharper.Plugins.Unity.Shaders.ShaderLab.Psi.Tree";

    // Propagate expected token types in error element for keywords code completion
    propagateExpectedTokenTypes;

    // Any role used in this file that begins with this prefix must be defined in `ChildRole`
    publicChildRolePrefix="SHADER_LAB_";


    // Namespace and suffix for custom element instance implementation created by
    // node type when `customImpl` option is specfied.
    // Default suffix is `Impl`
    customImplPackage="JetBrains.ReSharper.Plugins.Unity.Shaders.ShaderLab.Psi.Tree.Impl";
    "customImplSuffix"="";


    // Required on. Changes behaviour of various things, e.g. public child role values based on prefix
    disableReflection;

    // Required. If missing, generates Add/Remove methods for each collection
    generateWorkingPsi;
}