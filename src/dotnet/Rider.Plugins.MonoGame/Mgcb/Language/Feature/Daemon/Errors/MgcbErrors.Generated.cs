//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by JetBrains ErrorDescriptionGenerator
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using JetBrains.Application.I18n;
using JetBrains.Application.Parts;
using JetBrains.Application.Settings;
using JetBrains.Application;
using JetBrains.Core;
using JetBrains.DataFlow;
using JetBrains.DocumentModel;
using JetBrains.Lifetimes;
using JetBrains.ReSharper.Daemon;
using JetBrains.ReSharper.Feature.Services.Daemon.Attributes;
using JetBrains.ReSharper.Feature.Services.Daemon;
using JetBrains.ReSharper.Psi.ContentModel;
using JetBrains.ReSharper.Psi.Resolve;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi;
using JetBrains.UI.RichText;
using JetBrains.Util;
using Rider.Plugins.MonoGame.Mgcb.Language.Parsing.Tree;
using Strings = Rider.Plugins.MonoGame.Resources.Strings;


namespace Rider.Plugins.MonoGame.Mgcb.Language.Feature.Daemon.Errors
{
  #region MgcbSyntaxError

  [StaticSeverityHighlighting(Severity.ERROR, typeof(MgcbErrors), Languages = "MgcbReSharper", AttributeId = AnalysisHighlightingAttributeIds.ERROR, OverlapResolve = OverlapResolveKind.ERROR, ToolTipFormatStringResourceType = typeof(Strings), ToolTipFormatStringResourceName = nameof(Strings.Message))]
  public sealed partial class MgcbSyntaxError : MgcbHighlightingBase, IHighlighting
  {
    private readonly string MESSAGE = Strings.Message;

    public MgcbSyntaxError(string text, DocumentRange documentRange)
    {
      Text = text;
      DocumentRange = documentRange;
      ToolTip = string.Format(MESSAGE, Text);
    }

    public string Text { get; }
    public DocumentRange DocumentRange { get; }

    public /*Localized*/ string ToolTip { get; }
    public /*Localized*/ string ErrorStripeToolTip => ToolTip;

    public DocumentRange CalculateRange()
    {
      return DocumentRange;
    }

    public override bool IsValid()
    {
      return DocumentRange.IsValid();
    }
  }

  #endregion

}
